[
  {
    "question": "Qual widget é usado para entrada de texto simples em Flutter?",
    "options": {
      "a": "Checkbox",
      "b": "Radio",
      "c": "TextField",
      "d": "DatePicker"
    },
    "answer": "c",
    "answer_text": "TextField",
    "explanation": "O widget TextField é utilizado para entrada de texto simples em Flutter."
  },
  {
    "question": "O que o widget TextFormField oferece a mais em relação ao TextField?",
    "options": {
      "a": "Rolagem automática",
      "b": "Seleção de múltiplas opções",
      "c": "Exibição de datas",
      "d": "Suporte a validação e integração com formulários"
    },
    "answer": "d",
    "answer_text": "Suporte a validação e integração com formulários",
    "explanation": "TextFormField permite validação e integração com formulários, além das funcionalidades do TextField."
  },
  {
    "question": "Qual widget é ideal para selecionar uma opção entre várias em um grupo?",
    "options": {
      "a": "Checkbox",
      "b": "Radio",
      "c": "TextField",
      "d": "DatePicker"
    },
    "answer": "b",
    "answer_text": "Radio",
    "explanation": "O widget Radio permite selecionar apenas uma opção em um grupo."
  },
  {
    "question": "O widget Checkbox é usado para:",
    "options": {
      "a": "Seleção de uma única opção",
      "b": "Entrada de texto longo",
      "c": "Seleção de múltiplas opções",
      "d": "Exibição de uma lista suspensa"
    },
    "answer": "c",
    "answer_text": "Seleção de múltiplas opções",
    "explanation": "Checkbox permite marcar várias opções simultaneamente."
  },
  {
    "question": "Qual propriedade do DropdownButton define as opções exibidas?",
    "options": {
      "a": "items",
      "b": "value",
      "c": "onChanged",
      "d": "hint"
    },
    "answer": "a",
    "answer_text": "items",
    "explanation": "A propriedade items define a lista de opções que aparecerão no DropdownButton."
  },
  {
    "question": "O widget DatePicker é usado para:",
    "options": {
      "a": "Selecionar uma data em um calendário",
      "b": "Inserir texto formatado",
      "c": "Exibir uma lista rolável",
      "d": "Selecionar múltiplas opções"
    },
    "answer": "a",
    "answer_text": "Selecionar uma data em um calendário",
    "explanation": "O DatePicker fornece uma interface de calendário para selecionar datas."
  },
  {
    "question": "Qual widget permite rolagem de conteúdo em uma única direção?",
    "options": {
      "a": "Row",
      "b": "Column",
      "c": "SingleChildScrollView",
      "d": "TextFormField"
    },
    "answer": "c",
    "answer_text": "SingleChildScrollView",
    "explanation": "SingleChildScrollView permite rolagem vertical ou horizontal do conteúdo."
  },
  {
    "question": "O widget ListView é mais adequado para:",
    "options": {
      "a": "Exibir widgets em linha horizontal",
      "b": "Exibir uma lista rolável de itens",
      "c": "Organizar widgets em coluna",
      "d": "Entrada de dados de texto"
    },
    "answer": "b",
    "answer_text": "Exibir uma lista rolável de itens",
    "explanation": "ListView é usado para listas de itens com rolagem."
  },
  {
    "question": "Qual widget organiza seus filhos em uma linha horizontal?",
    "options": {
      "a": "Column",
      "b": "Row",
      "c": "ListView",
      "d": "SingleChildScrollView"
    },
    "answer": "b",
    "answer_text": "Row",
    "explanation": "O Row organiza seus filhos horizontalmente."
  },
  {
    "question": "O widget Column é usado para:",
    "options": {
      "a": "Exibir itens em uma lista rolável",
      "b": "Organizar widgets verticalmente",
      "c": "Permitir entrada de texto",
      "d": "Selecionar datas"
    },
    "answer": "b",
    "answer_text": "Organizar widgets verticalmente",
    "explanation": "Column organiza widgets filhos verticalmente."
  },
  {
    "question": "Em Dart, qual biblioteca é comumente usada para serialização e deserialização de arquivos?",
    "options": {
      "a": "dart:async",
      "b": "dart:io",
      "c": "dart:convert",
      "d": "dart:math"
    },
    "answer": "c",
    "answer_text": "dart:convert",
    "explanation": "A biblioteca 'dart:convert' contém funções como jsonEncode/jsonDecode."
  },
  {
    "question": "Qual função é usada para converter uma string JSON em um objeto Dart?",
    "options": {
      "a": "jsonEncode",
      "b": "jsonDecode",
      "c": "toString",
      "d": "parseJson"
    },
    "answer": "b",
    "answer_text": "jsonDecode",
    "explanation": "jsonDecode transforma JSON em Map ou List."
  },
  {
    "question": "O que a função jsonEncode faz?",
    "options": {
      "a": "Converte um objeto Dart em uma string JSON",
      "b": "Lê um arquivo de texto",
      "c": "Converte uma string em um inteiro",
      "d": "Executa operações assíncronas"
    },
    "answer": "a",
    "answer_text": "Converte um objeto Dart em uma string JSON",
    "explanation": "jsonEncode transforma objetos Dart em strings JSON."
  },
  {
    "question": "Qual palavra-chave em Dart indica que uma função é assíncrona?",
    "options": {
      "a": "sync",
      "b": "async",
      "c": "await",
      "d": "future"
    },
    "answer": "b",
    "answer_text": "async",
    "explanation": "'async' é usada para declarar funções assíncronas."
  },
  {
    "question": "Para que serve a palavra-chave await em Dart?",
    "options": {
      "a": "Definir uma função síncrona",
      "b": "Aguardar a conclusão de uma operação assíncrona",
      "c": "Criar uma lista de itens",
      "d": "Serializar dados"
    },
    "answer": "b",
    "answer_text": "Aguardar a conclusão de uma operação assíncrona",
    "explanation": "'await' pausa a execução até que a Future termine."
  },
  {
    "question": "Qual biblioteca é usada para fazer requisições HTTP em Flutter?",
    "options": {
      "a": "dart:io",
      "b": "http",
      "c": "dart:async",
      "d": "shared_preferences"
    },
    "answer": "b",
    "answer_text": "http",
    "explanation": "A biblioteca http facilita requisições REST em Flutter."
  },
  {
    "question": "Qual método da biblioteca http é usado para obter dados de um servidor?",
    "options": {
      "a": "post",
      "b": "get",
      "c": "put",
      "d": "delete"
    },
    "answer": "b",
    "answer_text": "get",
    "explanation": "http.get é usado para recuperar dados do servidor."
  },
  {
    "question": "O método http.post é usado para:",
    "options": {
      "a": "Excluir dados de um servidor",
      "b": "Atualizar dados existentes",
      "c": "Enviar dados para um servidor",
      "d": "Obter dados de um servidor"
    },
    "answer": "c",
    "answer_text": "Enviar dados para um servidor",
    "explanation": "http.post envia dados para a API."
  },
  {
    "question": "Qual método HTTP é usado para atualizar recursos existentes?",
    "options": {
      "a": "get",
      "b": "post",
      "c": "put",
      "d": "delete"
    },
    "answer": "c",
    "answer_text": "put",
    "explanation": "PUT atualiza os dados já existentes no servidor."
  },
  {
    "question": "O que o método http.delete faz?",
    "options": {
      "a": "Envia dados para o servidor",
      "b": "Remove um recurso do servidor",
      "c": "Obtém dados do servidor",
      "d": "Atualiza um recurso existente"
    },
    "answer": "b",
    "answer_text": "Remove um recurso do servidor",
    "explanation": "DELETE é usado para excluir dados no backend."
  },
  {
    "question": "Qual widget é usado para construir a interface com base no estado de um Future?",
    "options": {
      "a": "ListView",
      "b": "FutureBuilder",
      "c": "TextField",
      "d": "DropdownButton"
    },
    "answer": "b",
    "answer_text": "FutureBuilder",
    "explanation": "FutureBuilder reage ao estado de um Future."
  },
  {
    "question": "Qual propriedade do FutureBuilder define a operação assíncrona a ser monitorada?",
    "options": {
      "a": "builder",
      "b": "future",
      "c": "initialData",
      "d": "snapshot"
    },
    "answer": "b",
    "answer_text": "future",
    "explanation": "A propriedade 'future' define o Future que será monitorado."
  }
  ,
  {
    "question": "O que a propriedade builder do FutureBuilder faz?",
    "options": {
      "a": "Define o Future a ser executado",
      "b": "Constrói a interface com base no estado do Future",
      "c": "Armazena dados iniciais",
      "d": "Serializa dados JSON"
    },
    "answer": "b",
    "answer_text": "Constrói a interface com base no estado do Future",
    "explanation": "A propriedade builder define como a UI será construída com base nos dados do Future."
  },
  {
    "question": "Qual biblioteca é usada para persistência de dados simples em Flutter?",
    "options": {
      "a": "dart:io",
      "b": "http",
      "c": "shared_preferences",
      "d": "dart:convert"
    },
    "answer": "c",
    "answer_text": "shared_preferences",
    "explanation": "A biblioteca shared_preferences permite salvar dados simples localmente."
  },
  {
    "question": "Como você obtém uma instância de SharedPreferences?",
    "options": {
      "a": "SharedPreferences.getInstance()",
      "b": "SharedPreferences.create()",
      "c": "SharedPreferences.init()",
      "d": "SharedPreferences.load()"
    },
    "answer": "a",
    "answer_text": "SharedPreferences.getInstance()",
    "explanation": "SharedPreferences.getInstance() retorna a instância necessária para acessar os métodos de armazenamento."
  },
  {
    "question": "Qual método do SharedPreferences é usado para salvar um valor booleano?",
    "options": {
      "a": "setString",
      "b": "setInt",
      "c": "setBool",
      "d": "setDouble"
    },
    "answer": "c",
    "answer_text": "setBool",
    "explanation": "O método setBool salva um valor booleano nas preferências."
  },
  {
    "question": "Qual widget é mais adequado para formulários com validação?",
    "options": {
      "a": "TextField",
      "b": "TextFormField",
      "c": "Checkbox",
      "d": "Radio"
    },
    "answer": "b",
    "answer_text": "TextFormField",
    "explanation": "TextFormField tem suporte nativo à validação com a propriedade validator."
  },
  {
    "question": "Qual propriedade do TextField define o tipo de teclado exibido?",
    "options": {
      "a": "controller",
      "b": "keyboardType",
      "c": "onChanged",
      "d": "decoration"
    },
    "answer": "b",
    "answer_text": "keyboardType",
    "explanation": "keyboardType define o tipo de teclado exibido (numérico, texto, etc.)."
  },
  {
    "question": "O widget Radio requer qual propriedade para agrupar opções?",
    "options": {
      "a": "groupValue",
      "b": "value",
      "c": "onChanged",
      "d": "items"
    },
    "answer": "a",
    "answer_text": "groupValue",
    "explanation": "groupValue garante que apenas uma opção seja selecionada entre os radios do mesmo grupo."
  },
  {
    "question": "Qual propriedade do DropdownButton é chamada quando uma opção é selecionada?",
    "options": {
      "a": "value",
      "b": "items",
      "c": "onChanged",
      "d": "hint"
    },
    "answer": "c",
    "answer_text": "onChanged",
    "explanation": "A propriedade onChanged é acionada quando o usuário seleciona uma nova opção no dropdown."
  },
  {
    "question": "O widget DatePicker é geralmente apresentado usando:",
    "options": {
      "a": "showDialog",
      "b": "showDatePicker",
      "c": "showModalBottomSheet",
      "d": "Navigator.push"
    },
    "answer": "b",
    "answer_text": "showDatePicker",
    "explanation": "A função showDatePicker exibe o seletor de data em Flutter."
  },
  {
    "question": "Qual widget evita o overflow de conteúdo em uma tela?",
    "options": {
      "a": "Row",
      "b": "Column",
      "c": "SingleChildScrollView",
      "d": "ListView"
    },
    "answer": "c",
    "answer_text": "SingleChildScrollView",
    "explanation": "SingleChildScrollView permite que o conteúdo seja rolado, evitando overflow."
  },
  {
    "question": "Qual propriedade do ListView define a direção de rolagem?",
    "options": {
      "a": "scrollDirection",
      "b": "itemCount",
      "c": "children",
      "d": "padding"
    },
    "answer": "a",
    "answer_text": "scrollDirection",
    "explanation": "scrollDirection define se a lista será rolada na vertical ou horizontal."
  },
  {
    "question": "O widget Row pode ser combinado com qual widget para evitar overflow?",
    "options": {
      "a": "Column",
      "b": "SingleChildScrollView",
      "c": "TextField",
      "d": "Checkbox"
    },
    "answer": "b",
    "answer_text": "SingleChildScrollView",
    "explanation": "Ao envolver um Row com SingleChildScrollView, o conteúdo pode rolar horizontalmente, evitando overflow."
  },
  {
    "question": "Qual propriedade do Column controla o alinhamento horizontal dos filhos?",
    "options": {
      "a": "mainAxisAlignment",
      "b": "crossAxisAlignment",
      "c": "children",
      "d": "scrollDirection"
    },
    "answer": "b",
    "answer_text": "crossAxisAlignment",
    "explanation": "crossAxisAlignment define o alinhamento horizontal dos widgets dentro do Column."
  },
  {
    "question": "Qual tipo de dado é retornado por jsonDecode?",
    "options": {
      "a": "String",
      "b": "Map ou List",
      "c": "int",
      "d": "double"
    },
    "answer": "b",
    "answer_text": "Map ou List",
    "explanation": "jsonDecode converte a string JSON em uma estrutura Map ou List."
  },
  {
    "question": "Em operações assíncronas, o que Future representa?",
    "options": {
      "a": "Um valor disponível imediatamente",
      "b": "Um valor que estará disponível no futuro",
      "c": "Uma lista de widgets",
      "d": "Um arquivo serializado"
    },
    "answer": "b",
    "answer_text": "Um valor que estará disponível no futuro",
    "explanation": "Um Future representa um valor que será fornecido quando a operação assíncrona for concluída."
  },
  {
    "question": "Qual palavra-chave é usada para esperar o resultado de um Future?",
    "options": {
      "a": "async",
      "b": "await",
      "c": "then",
      "d": "sync"
    },
    "answer": "b",
    "answer_text": "await",
    "explanation": "await pausa a execução até que a Future termine e retorne o valor."
  },
  {
    "question": "Qual método da biblioteca http é usado para enviar dados atualizados ao servidor?",
    "options": {
      "a": "get",
      "b": "post",
      "c": "put",
      "d": "delete"
    },
    "answer": "c",
    "answer_text": "put",
    "explanation": "PUT é usado para atualizar dados em uma API REST."
  },
  {
    "question": "Qual propriedade do FutureBuilder fornece o estado atual do Future?",
    "options": {
      "a": "builder",
      "b": "future",
      "c": "snapshot",
      "d": "initialData"
    },
    "answer": "c",
    "answer_text": "snapshot",
    "explanation": "snapshot contém o estado e os dados atuais do Future."
  },
  {
    "question": "O que snapshot.hasData indica no FutureBuilder?",
    "options": {
      "a": "Se o Future foi concluído com erro",
      "b": "Se o Future está em execução",
      "c": "Se o Future retornou dados com sucesso",
      "d": "Se o Future foi cancelado"
    },
    "answer": "c",
    "answer_text": "Se o Future retornou dados com sucesso",
    "explanation": "snapshot.hasData retorna true se o Future retornou dados válidos."
  },
  {
    "question": "Qual método do SharedPreferences recupera um valor de string?",
    "options": {
      "a": "getInt",
      "b": "getString",
      "c": "getBool",
      "d": "getDouble"
    },
    "answer": "b",
    "answer_text": "getString",
    "explanation": "getString recupera valores do tipo string salvos anteriormente."
  },
  {
    "question": "Qual propriedade do TextFormField é usada para validação?",
    "options": {
      "a": "validator",
      "b": "controller",
      "c": "onChanged",
      "d": "keyboardType"
    },
    "answer": "a",
    "answer_text": "validator",
    "explanation": "A propriedade validator permite definir uma função de validação para os dados de entrada."
  },
  {
    "question": "Qual widget é mais eficiente para listas longas em Flutter?",
    "options": {
      "a": "Row",
      "b": "Column",
      "c": "ListView.builder",
      "d": "SingleChildScrollView"
    },
    "answer": "c",
    "answer_text": "ListView.builder",
    "explanation": "ListView.builder é eficiente pois carrega os itens sob demanda (lazy loading)."
  },
  {
    "question": "Qual método do SharedPreferences remove uma chave?",
    "options": {
      "a": "remove",
      "b": "clear",
      "c": "delete",
      "d": "setString"
    },
    "answer": "a",
    "answer_text": "remove",
    "explanation": "O método remove apaga a chave e seu valor associado do armazenamento local."
  },
  {
    "question": "O que acontece se você usar jsonEncode em um objeto sem suporte?",
    "options": {
      "a": "Retorna uma string vazia",
      "b": "Lança uma exceção",
      "c": "Converte para null",
      "d": "Ignora o objeto"
    },
    "answer": "b",
    "answer_text": "Lança uma exceção",
    "explanation": "Objetos não suportados por padrão causam exceções ao serem codificados."
  },
  {
    "question": "Qual propriedade do http.get define cabeçalhos da requisição?",
    "options": {
      "a": "headers",
      "b": "body",
      "c": "url",
      "d": "encoding"
    },
    "answer": "a",
    "answer_text": "headers",
    "explanation": "headers permite definir informações adicionais como Content-Type e Authorization."
  },
  {
    "question": "Qual método do SharedPreferences limpa todos os dados salvos?",
    "options": {
      "a": "remove",
      "b": "clear",
      "c": "deleteAll",
      "d": "reset"
    },
    "answer": "b",
    "answer_text": "clear",
    "explanation": "O método clear remove todos os pares chave-valor salvos."
  },
  {
    "question": "Qual é o propósito principal do FutureBuilder?",
    "options": {
      "a": "Exibir uma lista rolável",
      "b": "Construir a UI com base no estado de um Future",
      "c": "Serializar dados JSON",
      "d": "Armazenar dados localmente"
    },
    "answer": "b",
    "answer_text": "Construir a UI com base no estado de um Future",
    "explanation": "O FutureBuilder escuta um Future e reconstrói a interface conforme o estado do mesmo."
  }
]
